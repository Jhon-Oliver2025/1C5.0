#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para diagnosticar problemas do BTCSignalManager em produ√ß√£o
Verifica por que os sinais confirmados n√£o est√£o aparecendo na aba
"""

import requests
import json
from datetime import datetime
import sys
import os

def diagnose_production_btc():
    """
    Diagnostica problemas do sistema BTC em produ√ß√£o
    """
    print("\n" + "="*80)
    print("üîç DIAGN√ìSTICO DO SISTEMA BTC EM PRODU√á√ÉO")
    print("="*80)
    
    # URLs para testar (ajustar conforme necess√°rio)
    base_urls = [
        "http://localhost:5000",  # Desenvolvimento
        # Adicionar URL de produ√ß√£o aqui se necess√°rio
    ]
    
    for base_url in base_urls:
        print(f"\nüåê Testando: {base_url}")
        print("-" * 50)
        
        try:
            # 1. Testar status da API
            print("\n1. TESTANDO STATUS DA API...")
            response = requests.get(f"{base_url}/api/status", timeout=10)
            if response.status_code == 200:
                print("‚úÖ API Status: OK")
            else:
                print(f"‚ùå API Status: {response.status_code}")
                continue
            
            # 2. Testar endpoint de sinais confirmados (p√∫blico)
            print("\n2. TESTANDO SINAIS CONFIRMADOS (P√öBLICO)...")
            response = requests.get(f"{base_url}/api/btc-signals/confirmed", timeout=10)
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ Sinais confirmados: {len(data)} encontrados")
                
                if data:
                    print("\nüìä Exemplo de sinal confirmado:")
                    signal = data[0]
                    for key, value in signal.items():
                        print(f"   {key}: {value}")
                else:
                    print("‚ö†Ô∏è Nenhum sinal confirmado encontrado")
            else:
                print(f"‚ùå Erro ao obter sinais confirmados: {response.status_code}")
                print(f"   Resposta: {response.text[:200]}...")
            
            # 3. Testar m√©tricas BTC (requer autentica√ß√£o)
            print("\n3. TESTANDO M√âTRICAS BTC...")
            # Tentar sem token primeiro
            response = requests.get(f"{base_url}/api/btc-signals/metrics", timeout=10)
            if response.status_code == 403:
                print("‚ö†Ô∏è M√©tricas BTC requerem autentica√ß√£o (esperado)")
            elif response.status_code == 200:
                data = response.json()
                print("‚úÖ M√©tricas BTC obtidas com sucesso")
                if 'data' in data:
                    metrics = data['data']
                    print(f"   Sinais processados: {metrics.get('total_signals_processed', 'N/A')}")
                    print(f"   Sinais confirmados: {metrics.get('confirmed_signals', 'N/A')}")
                    print(f"   Sinais pendentes: {metrics.get('pending_signals', 'N/A')}")
                    print(f"   Taxa de confirma√ß√£o: {metrics.get('confirmation_rate', 'N/A')}%")
            else:
                print(f"‚ùå Erro ao obter m√©tricas: {response.status_code}")
            
            # 4. Verificar se h√° sinais pendentes
            print("\n4. VERIFICANDO SINAIS PENDENTES...")
            response = requests.get(f"{base_url}/api/btc-signals/pending", timeout=10)
            if response.status_code == 403:
                print("‚ö†Ô∏è Sinais pendentes requerem autentica√ß√£o (esperado)")
            elif response.status_code == 200:
                data = response.json()
                if 'data' in data and 'pending_signals' in data['data']:
                    pending_count = len(data['data']['pending_signals'])
                    print(f"‚úÖ Sinais pendentes: {pending_count}")
                else:
                    print("‚ö†Ô∏è Formato de resposta inesperado para sinais pendentes")
            else:
                print(f"‚ùå Erro ao obter sinais pendentes: {response.status_code}")
            
            # 5. Verificar status do sistema BTC
            print("\n5. VERIFICANDO STATUS DO SISTEMA BTC...")
            response = requests.get(f"{base_url}/api/btc-signals/status", timeout=10)
            if response.status_code == 403:
                print("‚ö†Ô∏è Status do sistema requer autentica√ß√£o (esperado)")
            elif response.status_code == 200:
                data = response.json()
                print("‚úÖ Status do sistema obtido")
                if 'data' in data:
                    status = data['data']
                    print(f"   Sistema ativo: {status.get('is_monitoring', 'N/A')}")
                    print(f"   Thread ativa: {status.get('monitoring_thread_active', 'N/A')}")
            else:
                print(f"‚ùå Erro ao obter status: {response.status_code}")
                
        except requests.exceptions.ConnectionError:
            print(f"‚ùå N√£o foi poss√≠vel conectar a {base_url}")
        except requests.exceptions.Timeout:
            print(f"‚ùå Timeout ao conectar a {base_url}")
        except Exception as e:
            print(f"‚ùå Erro inesperado: {e}")
    
    # 6. Diagn√≥stico de poss√≠veis problemas
    print("\n" + "="*80)
    print("üîß DIAGN√ìSTICO DE POSS√çVEIS PROBLEMAS")
    print("="*80)
    
    print("\nüìã POSS√çVEIS CAUSAS:")
    print("1. BTCSignalManager n√£o inicializado corretamente")
    print("2. Monitoramento n√£o est√° ativo")
    print("3. Nenhum sinal foi confirmado ainda")
    print("4. Problema na API de sinais confirmados")
    print("5. Diferen√ßa entre ambiente de desenvolvimento e produ√ß√£o")
    
    print("\nüîß SOLU√á√ïES RECOMENDADAS:")
    print("1. Verificar logs do backend para erros de inicializa√ß√£o")
    print("2. Reiniciar o sistema BTC via API admin")
    print("3. Verificar se h√° sinais pendentes aguardando confirma√ß√£o")
    print("4. Confirmar que o monitoramento est√° ativo")
    print("5. Verificar configura√ß√µes espec√≠ficas de produ√ß√£o")
    
    print("\n‚úÖ Diagn√≥stico conclu√≠do!")

if __name__ == '__main__':
    diagnose_production_btc()