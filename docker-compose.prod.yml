version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: crypto-postgres
    environment:
      - POSTGRES_DB=crypto_signals
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./back/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - crypto-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: crypto-redis
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - crypto-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  backend:
    build: ./back
    container_name: crypto-backend
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/crypto_signals
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_SECRET_KEY=${BINANCE_SECRET_KEY}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      - SENDPULSE_CLIENT_ID=${SENDPULSE_CLIENT_ID}
      - SENDPULSE_CLIENT_SECRET=${SENDPULSE_CLIENT_SECRET}
      - SENDPULSE_SENDER_EMAIL=${SENDPULSE_SENDER_EMAIL}
      - SENDPULSE_API_URL=${SENDPULSE_API_URL}
      - CORS_ORIGINS=https://1crypten.space,https://www.1crypten.space
      - API_BASE_URL=https://api.1crypten.space
      # Configurações de performance
      - GUNICORN_WORKERS=4
      - GUNICORN_THREADS=2
      - GUNICORN_TIMEOUT=120
      - GUNICORN_KEEPALIVE=5
    volumes:
      - ./back/data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - crypto-network
    deploy:
      resources:
        limits:
          memory: 2G          # Dobrado para melhor performance
          cpus: '2.0'         # Dobrado para processar mais requisições
        reservations:
          memory: 512M        # Garantir memória mínima
          cpus: '0.5'         # Garantir CPU mínima
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:5000/')"]
      interval: 30s         # Aumentado para reduzir overhead
      timeout: 10s          # Aumentado para dar mais tempo
      retries: 5            # Mais tentativas antes de falhar
      start_period: 60s     # Mais tempo para inicialização

  frontend:
    build: ./front
    container_name: crypto-frontend
    environment:
      - REACT_APP_API_URL=https://1crypten.space
      - REACT_APP_DOMAIN=https://1crypten.space
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - crypto-network

  nginx:
    image: nginx:alpine
    container_name: crypto-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - crypto-network

volumes:
  postgres_data:
  redis_data:

networks:
  crypto-network:
    driver: bridge