# -*- coding: utf-8 -*-
"""
Sistema de Limpeza Autom√°tica de Sinais
Limpa sinais nos hor√°rios: 10:00 e 21:00 (hor√°rio de S√£o Paulo)
"""

import schedule
import time
import threading
from datetime import datetime, timedelta
import pytz
import os
from typing import Optional
from supabase import create_client, Client

class SignalCleanup:
    """Sistema de limpeza autom√°tica de sinais baseado no hor√°rio de S√£o Paulo"""
    
    def __init__(self):
        """Inicializa o sistema de limpeza"""
        self.sao_paulo_tz = pytz.timezone('America/Sao_Paulo')
        self.is_running = False
        self.cleanup_thread: Optional[threading.Thread] = None
        
        # Configurar Supabase
        self.supabase_url = os.getenv('SUPABASE_URL')
        self.supabase_key = os.getenv('SUPABASE_ANON_KEY')
        
        print("üßπ Sistema de Limpeza de Sinais inicializado")
    
    def daily_system_restart(self) -> None:
        """Executa restart completo do sistema √†s 21:00"""
        try:
            now_sp = datetime.now(self.sao_paulo_tz)
            
            print("\n" + "="*80)
            print(f"üîÑ RESTART DI√ÅRIO DO SISTEMA - {now_sp.strftime('%d/%m/%Y %H:%M:%S')} (SP)")
            print("üåô REIN√çCIO COMPLETO PARA NOVA SESS√ÉO DE TRADING")
            print("="*80)
            
            # 1. Limpar todos os sinais antigos
            print("üßπ Executando limpeza completa de sinais...")
            self.cleanup_old_signals()
            
            # 2. Resetar sistema BTC de confirma√ß√£o
            print("‚Çø Reiniciando sistema de confirma√ß√£o BTC...")
            try:
                # Obter inst√¢ncia do BTCSignalManager do app
                from flask import current_app
                if hasattr(current_app, 'bot_instance') and current_app.bot_instance:
                    bot_instance = current_app.bot_instance
                    if hasattr(bot_instance, 'btc_signal_manager') and bot_instance.btc_signal_manager:
                        btc_manager = bot_instance.btc_signal_manager
                        
                        # Resetar controle de sinais confirmados di√°rios
                        btc_manager.reset_daily_confirmed_signals()
                        
                        # Verificar sinais ainda ativos p√≥s-restart
                        btc_manager.check_post_restart_signals()
                        
                        print("‚úÖ Sistema BTC reiniciado com sucesso")
                        print(f"üìä Controle de duplica√ß√£o resetado")
                    else:
                        print("‚ö†Ô∏è BTCSignalManager n√£o encontrado")
                else:
                    print("‚ö†Ô∏è Bot instance n√£o encontrada")
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao reiniciar sistema BTC: {e}")
            
            # 3. Atualizar estat√≠sticas do sistema
            print("üìä Atualizando estat√≠sticas do sistema...")
            self.update_system_stats()
            
            print(f"\nüéØ RESTART COMPLETO FINALIZADO")
            print(f"‚è∞ Pr√≥ximo restart: {self.get_next_restart_time()}")
            print("‚úÖ Sistema pronto para nova sess√£o de trading!")
            print("="*80)
            
        except Exception as e:
            print(f"‚ùå Erro no restart do sistema: {e}")
            import traceback
            traceback.print_exc()
    
    def cleanup_old_signals(self) -> None:
        """Remove apenas sinais pendentes e rejeitados antigos, preservando sinais confirmados at√© √†s 21:00"""
        try:
            if not self.supabase_url or not self.supabase_key:
                print("‚ö†Ô∏è Supabase n√£o configurado para limpeza")
                return
            
            supabase: Client = create_client(self.supabase_url, self.supabase_key)
            now_sp = datetime.now(self.sao_paulo_tz)
            
            # Definir hor√°rio de corte para sinais pendentes/rejeitados (24h atr√°s)
            cutoff_time_pending = now_sp - timedelta(hours=24)
            cutoff_time_pending_utc = cutoff_time_pending.astimezone(pytz.UTC)
            
            # Para sinais confirmados, s√≥ remover os do dia anterior √†s 21:00
            # Se ainda n√£o passou das 21:00 hoje, manter sinais confirmados de ontem
            if now_sp.hour < 21:
                # Ainda n√£o passou das 21:00, manter sinais confirmados de ontem
                yesterday_21h = (now_sp - timedelta(days=1)).replace(hour=21, minute=0, second=0, microsecond=0)
            else:
                # J√° passou das 21:00, pode remover sinais confirmados de hoje √†s 21:00
                yesterday_21h = now_sp.replace(hour=21, minute=0, second=0, microsecond=0)
            
            cutoff_time_confirmed_utc = yesterday_21h.astimezone(pytz.UTC)
            
            print(f"üóëÔ∏è Removendo sinais pendentes/rejeitados anteriores a: {cutoff_time_pending.strftime('%d/%m/%Y %H:%M')} (SP)")
            print(f"üóëÔ∏è Removendo sinais confirmados anteriores a: {yesterday_21h.strftime('%d/%m/%Y %H:%M')} (SP)")
            
            # 1. Buscar e remover sinais pendentes e rejeitados antigos
            old_pending_signals = supabase.table('signals').select('id, symbol, status, created_at').in_('status', ['PENDING', 'REJECTED']).lt('created_at', cutoff_time_pending_utc.isoformat()).execute()
            
            pending_removed = 0
            if old_pending_signals.data:
                print(f"üìä Encontrados {len(old_pending_signals.data)} sinais pendentes/rejeitados para remo√ß√£o")
                
                for signal in old_pending_signals.data:
                    try:
                        supabase.table('signals').delete().eq('id', signal['id']).execute()
                        print(f"üóëÔ∏è Removido {signal['status']}: {signal['symbol']} (ID: {signal['id']})")
                        pending_removed += 1
                    except Exception as e:
                        print(f"‚ùå Erro ao remover sinal {signal['id']}: {e}")
            
            # 2. Buscar e remover apenas sinais confirmados muito antigos (anteriores ao hor√°rio de corte)
            old_confirmed_signals = supabase.table('signals').select('id, symbol, status, created_at').eq('status', 'CONFIRMED').lt('created_at', cutoff_time_confirmed_utc.isoformat()).execute()
            
            confirmed_removed = 0
            if old_confirmed_signals.data:
                print(f"üìä Encontrados {len(old_confirmed_signals.data)} sinais confirmados antigos para remo√ß√£o")
                
                for signal in old_confirmed_signals.data:
                    try:
                        supabase.table('signals').delete().eq('id', signal['id']).execute()
                        print(f"üóëÔ∏è Removido CONFIRMED: {signal['symbol']} (ID: {signal['id']})")
                        confirmed_removed += 1
                    except Exception as e:
                        print(f"‚ùå Erro ao remover sinal confirmado {signal['id']}: {e}")
            
            total_removed = pending_removed + confirmed_removed
            print(f"‚úÖ Limpeza conclu√≠da: {total_removed} sinais removidos ({pending_removed} pendentes/rejeitados, {confirmed_removed} confirmados antigos)")
            
            # Estat√≠sticas finais
            remaining_signals = supabase.table('signals').select('id', count='exact').execute()
            total_remaining = remaining_signals.count if remaining_signals.count else 0
            
            # Contar sinais confirmados restantes
            confirmed_remaining = supabase.table('signals').select('id', count='exact').eq('status', 'CONFIRMED').execute()
            confirmed_count = confirmed_remaining.count if confirmed_remaining.count else 0
            
            print(f"üìä Sinais restantes no sistema: {total_remaining} (sendo {confirmed_count} confirmados)")
            print(f"‚úÖ Sinais confirmados preservados at√© √†s 21:00 conforme solicitado")
            
        except Exception as e:
            print(f"‚ùå Erro na limpeza de sinais: {e}")
            import traceback
            traceback.print_exc()
    
    def update_system_stats(self) -> None:
        """Atualiza estat√≠sticas do sistema ap√≥s restart"""
        try:
            now_sp = datetime.now(self.sao_paulo_tz)
            
            # Aqui podemos adicionar l√≥gica para salvar estat√≠sticas do restart
            # Por exemplo, salvar no banco de dados informa√ß√µes sobre:
            # - Hor√°rio do √∫ltimo restart
            # - N√∫mero de sinais removidos
            # - Status do sistema BTC
            # - M√©tricas de performance
            
            print(f"üìà Estat√≠sticas atualizadas - {now_sp.strftime('%d/%m/%Y %H:%M:%S')}")
            
        except Exception as e:
            print(f"‚ùå Erro ao atualizar estat√≠sticas: {e}")
    
    def schedule_cleanup(self) -> None:
        """Agenda restart di√°rio do sistema com timezone correto"""
        # IMPORTANTE: A biblioteca schedule n√£o suporta timezone nativamente
        # Vamos usar uma abordagem diferente com verifica√ß√£o manual de hor√°rio
        
        print("üìÖ Sistema de restart configurado:")
        print("   üß™ TESTE: 12:00 - Restart Di√°rio Completo do Sistema")
        print("   üåç Timezone: America/Sao_Paulo")
        print("   ‚ö†Ô∏è Usando verifica√ß√£o manual de timezone (schedule n√£o suporta timezone)")
        print("   üîÑ TODO: Voltar para 21:00 ap√≥s teste")
    
    def start_scheduler(self) -> None:
        """Inicia o agendador de limpeza em thread separada"""
        if self.is_running:
            print("‚ö†Ô∏è Sistema de limpeza j√° est√° rodando")
            return
        
        self.is_running = True
        self.schedule_cleanup()
        
        def run_scheduler():
            print("üöÄ Sistema de limpeza autom√°tica iniciado")
            last_restart_date = None  # Controlar para executar apenas uma vez por dia
            
            while self.is_running:
                try:
                    # Obter hor√°rio atual de S√£o Paulo
                    now_sp = datetime.now(self.sao_paulo_tz)
                    current_date = now_sp.date()
                    current_hour = now_sp.hour
                    current_minute = now_sp.minute
                    
                    # Debug: mostrar hor√°rio atual a cada 30 minutos
                    if current_minute % 30 == 0:
                        print(f"üïê Hor√°rio atual SP: {now_sp.strftime('%d/%m/%Y %H:%M:%S')} - TESTE: Aguardando 12:00")
                    
                    # TESTE EM PRODU√á√ÉO: Verificar se √© 12:00 e ainda n√£o executou hoje
                    # TODO: Voltar para 21:00 ap√≥s teste
                    if (current_hour == 12 and current_minute == 0 and 
                        last_restart_date != current_date):
                        
                        print(f"‚è∞ HOR√ÅRIO DE RESTART DETECTADO: {now_sp.strftime('%d/%m/%Y %H:%M:%S')}")
                        print("üöÄ Executando restart di√°rio do sistema...")
                        
                        # Executar restart
                        self.daily_system_restart()
                        
                        # Marcar que j√° executou hoje
                        last_restart_date = current_date
                        print(f"‚úÖ Restart conclu√≠do. Pr√≥ximo restart: {(current_date + timedelta(days=1)).strftime('%d/%m/%Y')} √†s 21:00")
                    
                    # Executar jobs agendados da biblioteca schedule (se houver outros)
                    schedule.run_pending()
                    
                    time.sleep(60)  # Verificar a cada minuto
                    
                except Exception as e:
                    print(f"‚ùå Erro no agendador de limpeza: {e}")
                    import traceback
                    traceback.print_exc()
                    time.sleep(60)
        
        self.cleanup_thread = threading.Thread(target=run_scheduler, daemon=True)
        self.cleanup_thread.start()
        
        print("‚úÖ Sistema de limpeza autom√°tica ativo")
    
    def stop_scheduler(self) -> None:
        """Para o agendador de limpeza"""
        self.is_running = False
        schedule.clear()
        
        if self.cleanup_thread and self.cleanup_thread.is_alive():
            self.cleanup_thread.join(timeout=5)
        
        print("üõë Sistema de limpeza autom√°tica parado")
    
    def manual_cleanup(self) -> None:
        """Executa limpeza manual (para testes)"""
        print("üîß Executando limpeza manual...")
        self.cleanup_old_signals()
    
    def test_restart_system(self) -> None:
        """Testa o sistema de restart (para debug)"""
        print("üß™ TESTE DO SISTEMA DE RESTART")
        print("="*50)
        
        now_sp = datetime.now(self.sao_paulo_tz)
        print(f"‚è∞ Hor√°rio atual SP: {now_sp.strftime('%d/%m/%Y %H:%M:%S')}")
        print(f"üìÖ Pr√≥ximo restart: {self.get_next_restart_time()}")
        
        time_until = self.get_time_until_restart()
        print(f"‚è≥ Tempo at√© restart: {time_until['hours']}h {time_until['minutes']}m {time_until['seconds']}s")
        
        print(f"üîÑ Sistema ativo: {self.is_running}")
        print(f"üßµ Thread ativa: {self.cleanup_thread.is_alive() if self.cleanup_thread else False}")
        
        print("\nüöÄ Executando restart de teste...")
        self.daily_system_restart()
        print("‚úÖ Teste conclu√≠do!")
    
    def get_system_status(self) -> dict:
        """Retorna status detalhado do sistema"""
        now_sp = datetime.now(self.sao_paulo_tz)
        time_until = self.get_time_until_restart()
        
        return {
            'is_running': self.is_running,
            'thread_active': self.cleanup_thread.is_alive() if self.cleanup_thread else False,
            'current_time_sp': now_sp.strftime('%d/%m/%Y %H:%M:%S'),
            'next_restart': self.get_next_restart_time(),
            'time_until_restart': time_until,
            'timezone': str(self.sao_paulo_tz)
        }
    
    def get_next_restart_time(self) -> str:
        """Retorna o hor√°rio do pr√≥ximo restart do sistema"""
        now_sp = datetime.now(self.sao_paulo_tz)
        
        # TESTE: Pr√≥ximo restart √†s 12:00
        # TODO: Voltar para 21:00 ap√≥s teste
        next_restart = now_sp.replace(hour=12, minute=0, second=0, microsecond=0)
        if next_restart <= now_sp:
            next_restart += timedelta(days=1)
        
        return next_restart.strftime('%d/%m/%Y %H:%M:%S')
    
    def get_time_until_restart(self) -> dict:
        """Retorna tempo restante at√© o pr√≥ximo restart"""
        now_sp = datetime.now(self.sao_paulo_tz)
        
        # TESTE: Pr√≥ximo restart √†s 12:00
        # TODO: Voltar para 21:00 ap√≥s teste
        next_restart = now_sp.replace(hour=12, minute=0, second=0, microsecond=0)
        if next_restart <= now_sp:
            next_restart += timedelta(days=1)
        
        time_diff = next_restart - now_sp
        hours = time_diff.seconds // 3600
        minutes = (time_diff.seconds % 3600) // 60
        seconds = time_diff.seconds % 60
        
        return {
            'hours': hours,
            'minutes': minutes,
            'seconds': seconds,
            'total_seconds': time_diff.total_seconds(),
            'next_restart': next_restart.strftime('%d/%m/%Y %H:%M:%S')
        }

# Inst√¢ncia global para uso em outros m√≥dulos
cleanup_system = SignalCleanup()

if __name__ == "__main__":
    # Teste do sistema
    cleanup = SignalCleanup()
    print(f"üìÖ Pr√≥xima limpeza: {cleanup.get_next_cleanup_time()}")
    
    # Para teste manual, descomente a linha abaixo:
    # cleanup.manual_cleanup()