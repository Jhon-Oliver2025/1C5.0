#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para testar a inicializa√ß√£o espec√≠fica do Flask
"""

import os
import sys
import traceback
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
load_dotenv()

print("üîç Testando inicializa√ß√£o do Flask...")
print("="*50)

try:
    print("1. Testando importa√ß√£o do config...")
    from config import server
    print("‚úÖ Config importado com sucesso")
    
    print("\n2. Testando cria√ß√£o da app Flask...")
    from api import create_app
    app = create_app()
    print("‚úÖ App Flask criada com sucesso")
    
    print("\n3. Testando configura√ß√µes da app...")
    print(f"   - Debug: {app.debug}")
    print(f"   - Testing: {app.testing}")
    print(f"   - Secret Key: {app.config.get('SECRET_KEY', 'NOT_SET')[:10]}...")
    print(f"   - JWT Secret: {app.config.get('JWT_SECRET', 'NOT_SET')[:10]}...")
    
    print("\n4. Testando registro de rotas b√°sicas...")
    with app.app_context():
        # Testar se as rotas b√°sicas est√£o funcionando
        @app.route('/test')
        def test_route():
            return {'status': 'ok', 'message': 'Flask est√° funcionando'}
        
        print("‚úÖ Rota de teste registrada")
    
    print("\n5. Testando inicializa√ß√£o do servidor de teste...")
    with app.test_client() as client:
        # Testar rota b√°sica
        response = client.get('/test')
        print(f"   - Status da resposta: {response.status_code}")
        print(f"   - Dados da resposta: {response.get_json()}")
        
        if response.status_code == 200:
            print("‚úÖ Servidor Flask respondendo corretamente")
        else:
            print(f"‚ùå Servidor Flask retornou status {response.status_code}")
    
    print("\n6. Testando importa√ß√£o do KryptonBot...")
    try:
        from krypton_bot import KryptonBot
        print("‚úÖ KryptonBot importado com sucesso")
        
        # Testar inicializa√ß√£o b√°sica
        bot = KryptonBot()
        print("‚úÖ KryptonBot inicializado com sucesso")
        
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao inicializar KryptonBot: {e}")
        print("   Isso pode n√£o ser cr√≠tico para o Flask")
    
    print("\n7. Testando registro completo das rotas...")
    try:
        from api import register_api_routes
        # Simular bot_instance para teste
        class MockBot:
            pass
        
        mock_bot = MockBot()
        register_api_routes(app, mock_bot)
        print("‚úÖ Rotas registradas com sucesso")
        
        # Listar algumas rotas registradas
        print("\n   Rotas registradas:")
        for rule in app.url_map.iter_rules():
            if str(rule).startswith('/api/'):
                print(f"   - {rule}")
                
    except Exception as e:
        print(f"‚ùå Erro ao registrar rotas: {e}")
        traceback.print_exc()
    
    print("\nüéâ Teste de inicializa√ß√£o do Flask conclu√≠do!")
    print("\nüìã Resumo:")
    print("- Config: ‚úÖ")
    print("- Flask App: ‚úÖ")
    print("- Configura√ß√µes: ‚úÖ")
    print("- Servidor de teste: ‚úÖ")
    print("- Registro de rotas: ‚úÖ")
    
except Exception as e:
    print(f"\n‚ùå ERRO CR√çTICO: {e}")
    print("\nüîç Traceback completo:")
    traceback.print_exc()
    sys.exit(1)