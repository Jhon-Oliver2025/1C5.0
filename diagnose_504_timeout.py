#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de Diagn√≥stico para Gateway Timeout 504 em Produ√ß√£o
Este script identifica e resolve problemas de timeout no ambiente de produ√ß√£o.
"""

import requests
import time
import json
import subprocess
import sys
from datetime import datetime
from typing import Dict, List, Any

class TimeoutDiagnostic:
    """
    Classe para diagnosticar problemas de Gateway Timeout 504
    """
    
    def __init__(self, domain: str = "1crypten.space"):
        self.domain = domain
        self.base_url = f"https://{domain}"
        self.results = []
        
    def log_result(self, test_name: str, status: str, details: str, response_time: float = 0):
        """
        Registra resultado de um teste
        """
        result = {
            "timestamp": datetime.now().isoformat(),
            "test": test_name,
            "status": status,
            "details": details,
            "response_time": response_time
        }
        self.results.append(result)
        
        # Log colorido no console
        color = "\033[92m" if status == "PASS" else "\033[91m" if status == "FAIL" else "\033[93m"
        reset = "\033[0m"
        print(f"{color}[{status}]{reset} {test_name}: {details} ({response_time:.2f}s)")
    
    def test_basic_connectivity(self):
        """
        Testa conectividade b√°sica com o dom√≠nio
        """
        print("\nüîç Testando conectividade b√°sica...")
        
        try:
            start_time = time.time()
            response = requests.get(self.base_url, timeout=30)
            response_time = time.time() - start_time
            
            if response.status_code == 200:
                self.log_result("Conectividade B√°sica", "PASS", 
                              f"Status {response.status_code}", response_time)
            else:
                self.log_result("Conectividade B√°sica", "WARN", 
                              f"Status {response.status_code}", response_time)
                
        except requests.exceptions.Timeout:
            self.log_result("Conectividade B√°sica", "FAIL", 
                          "Timeout ap√≥s 30s", 30.0)
        except Exception as e:
            self.log_result("Conectividade B√°sica", "FAIL", 
                          f"Erro: {str(e)}", 0)
    
    def test_api_endpoints(self):
        """
        Testa endpoints espec√≠ficos da API
        """
        print("\nüîç Testando endpoints da API...")
        
        endpoints = [
            "/api/status",
            "/api/btc-signals/confirmed",
            "/manifest.json",
            "/logo3.png"
        ]
        
        for endpoint in endpoints:
            try:
                start_time = time.time()
                url = f"{self.base_url}{endpoint}"
                response = requests.get(url, timeout=60)
                response_time = time.time() - start_time
                
                if response.status_code == 200:
                    self.log_result(f"Endpoint {endpoint}", "PASS", 
                                  f"Status {response.status_code}", response_time)
                elif response.status_code == 504:
                    self.log_result(f"Endpoint {endpoint}", "FAIL", 
                                  "Gateway Timeout 504", response_time)
                else:
                    self.log_result(f"Endpoint {endpoint}", "WARN", 
                                  f"Status {response.status_code}", response_time)
                    
            except requests.exceptions.Timeout:
                self.log_result(f"Endpoint {endpoint}", "FAIL", 
                              "Timeout ap√≥s 60s", 60.0)
            except Exception as e:
                self.log_result(f"Endpoint {endpoint}", "FAIL", 
                              f"Erro: {str(e)}", 0)
    
    def test_server_response_times(self):
        """
        Testa tempos de resposta em m√∫ltiplas tentativas
        """
        print("\nüîç Testando tempos de resposta...")
        
        response_times = []
        failures = 0
        
        for i in range(5):
            try:
                start_time = time.time()
                response = requests.get(f"{self.base_url}/api/status", timeout=30)
                response_time = time.time() - start_time
                response_times.append(response_time)
                
                if response.status_code != 200:
                    failures += 1
                    
            except Exception:
                failures += 1
                response_times.append(30.0)  # Timeout
            
            time.sleep(2)  # Aguardar entre tentativas
        
        if response_times:
            avg_time = sum(response_times) / len(response_times)
            max_time = max(response_times)
            min_time = min(response_times)
            
            status = "PASS" if avg_time < 10 and failures == 0 else "WARN" if failures < 3 else "FAIL"
            details = f"Avg: {avg_time:.2f}s, Min: {min_time:.2f}s, Max: {max_time:.2f}s, Failures: {failures}/5"
            
            self.log_result("Tempos de Resposta", status, details, avg_time)
    
    def check_dns_resolution(self):
        """
        Verifica resolu√ß√£o DNS
        """
        print("\nüîç Verificando resolu√ß√£o DNS...")
        
        try:
            import socket
            start_time = time.time()
            ip = socket.gethostbyname(self.domain)
            response_time = time.time() - start_time
            
            self.log_result("Resolu√ß√£o DNS", "PASS", 
                          f"IP: {ip}", response_time)
            
        except Exception as e:
            self.log_result("Resolu√ß√£o DNS", "FAIL", 
                          f"Erro: {str(e)}", 0)
    
    def check_ssl_certificate(self):
        """
        Verifica certificado SSL
        """
        print("\nüîç Verificando certificado SSL...")
        
        try:
            import ssl
            import socket
            from datetime import datetime
            
            context = ssl.create_default_context()
            
            with socket.create_connection((self.domain, 443), timeout=10) as sock:
                with context.wrap_socket(sock, server_hostname=self.domain) as ssock:
                    cert = ssock.getpeercert()
                    
                    # Verificar expira√ß√£o
                    not_after = datetime.strptime(cert['notAfter'], '%b %d %H:%M:%S %Y %Z')
                    days_until_expiry = (not_after - datetime.now()).days
                    
                    if days_until_expiry > 30:
                        status = "PASS"
                    elif days_until_expiry > 7:
                        status = "WARN"
                    else:
                        status = "FAIL"
                    
                    details = f"Expira em {days_until_expiry} dias ({not_after.strftime('%Y-%m-%d')})"
                    self.log_result("Certificado SSL", status, details, 0)
                    
        except Exception as e:
            self.log_result("Certificado SSL", "FAIL", 
                          f"Erro: {str(e)}", 0)
    
    def analyze_headers(self):
        """
        Analisa headers de resposta para identificar problemas
        """
        print("\nüîç Analisando headers de resposta...")
        
        try:
            response = requests.get(self.base_url, timeout=30)
            headers = response.headers
            
            # Verificar servidor
            server = headers.get('Server', 'Unknown')
            
            # Verificar cache
            cache_control = headers.get('Cache-Control', 'None')
            
            # Verificar compress√£o
            content_encoding = headers.get('Content-Encoding', 'None')
            
            details = f"Server: {server}, Cache: {cache_control}, Encoding: {content_encoding}"
            self.log_result("Headers de Resposta", "INFO", details, 0)
            
            # Verificar se h√° indica√ß√µes de proxy/load balancer
            if 'nginx' in server.lower():
                self.log_result("Servidor Web", "INFO", "Nginx detectado", 0)
            
        except Exception as e:
            self.log_result("Headers de Resposta", "FAIL", 
                          f"Erro: {str(e)}", 0)
    
    def generate_recommendations(self):
        """
        Gera recomenda√ß√µes baseadas nos resultados dos testes
        """
        print("\nüìã Gerando recomenda√ß√µes...")
        
        failed_tests = [r for r in self.results if r['status'] == 'FAIL']
        slow_tests = [r for r in self.results if r['response_time'] > 10]
        
        recommendations = []
        
        if failed_tests:
            recommendations.append("üö® CR√çTICO: H√° falhas nos testes b√°sicos")
            
            # Verificar se h√° timeouts
            timeout_tests = [r for r in failed_tests if 'timeout' in r['details'].lower()]
            if timeout_tests:
                recommendations.extend([
                    "‚Ä¢ Verificar se o backend est√° rodando",
                    "‚Ä¢ Verificar configura√ß√µes de timeout no Nginx",
                    "‚Ä¢ Verificar recursos do servidor (CPU, RAM, Disk)",
                    "‚Ä¢ Aplicar configura√ß√µes do GATEWAY_TIMEOUT_FIX.md"
                ])
        
        if slow_tests:
            recommendations.append("‚ö†Ô∏è PERFORMANCE: Respostas lentas detectadas")
            recommendations.extend([
                "‚Ä¢ Otimizar queries do banco de dados",
                "‚Ä¢ Implementar cache Redis",
                "‚Ä¢ Verificar logs do backend para gargalos",
                "‚Ä¢ Considerar scaling horizontal"
            ])
        
        # Verificar padr√µes espec√≠ficos
        api_failures = [r for r in failed_tests if '/api/' in r['test']]
        if api_failures:
            recommendations.extend([
                "‚Ä¢ Verificar se o backend Python est√° rodando",
                "‚Ä¢ Verificar logs do Gunicorn/Flask",
                "‚Ä¢ Verificar conectividade com banco de dados"
            ])
        
        static_failures = [r for r in failed_tests if any(ext in r['test'] for ext in ['.png', '.js', '.css', '.json'])]
        if static_failures:
            recommendations.extend([
                "‚Ä¢ Verificar se arquivos est√°ticos est√£o sendo servidos corretamente",
                "‚Ä¢ Verificar configura√ß√£o do Nginx para arquivos est√°ticos",
                "‚Ä¢ Verificar permiss√µes de arquivos"
            ])
        
        if not recommendations:
            recommendations.append("‚úÖ Todos os testes passaram! Sistema funcionando normalmente.")
        
        return recommendations
    
    def run_full_diagnostic(self):
        """
        Executa diagn√≥stico completo
        """
        print(f"üîç Iniciando diagn√≥stico completo para {self.domain}")
        print(f"‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("=" * 60)
        
        # Executar todos os testes
        self.check_dns_resolution()
        self.test_basic_connectivity()
        self.check_ssl_certificate()
        self.analyze_headers()
        self.test_api_endpoints()
        self.test_server_response_times()
        
        # Gerar relat√≥rio
        print("\n" + "=" * 60)
        print("üìä RELAT√ìRIO DE DIAGN√ìSTICO")
        print("=" * 60)
        
        # Estat√≠sticas
        total_tests = len(self.results)
        passed_tests = len([r for r in self.results if r['status'] == 'PASS'])
        failed_tests = len([r for r in self.results if r['status'] == 'FAIL'])
        warned_tests = len([r for r in self.results if r['status'] == 'WARN'])
        
        print(f"Total de testes: {total_tests}")
        print(f"‚úÖ Passou: {passed_tests}")
        print(f"‚ö†Ô∏è Aviso: {warned_tests}")
        print(f"‚ùå Falhou: {failed_tests}")
        
        # Recomenda√ß√µes
        recommendations = self.generate_recommendations()
        print("\nüéØ RECOMENDA√á√ïES:")
        for rec in recommendations:
            print(f"  {rec}")
        
        # Salvar relat√≥rio
        self.save_report()
        
        return self.results
    
    def save_report(self):
        """
        Salva relat√≥rio em arquivo JSON
        """
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"timeout_diagnostic_{timestamp}.json"
        
        report = {
            "timestamp": datetime.now().isoformat(),
            "domain": self.domain,
            "results": self.results,
            "recommendations": self.generate_recommendations()
        }
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(report, f, indent=2, ensure_ascii=False)
            print(f"\nüíæ Relat√≥rio salvo em: {filename}")
        except Exception as e:
            print(f"\n‚ùå Erro ao salvar relat√≥rio: {e}")

def main():
    """
    Fun√ß√£o principal
    """
    print("üö® Diagn√≥stico de Gateway Timeout 504")
    print("=====================================\n")
    
    # Permitir dom√≠nio customizado
    domain = input("Digite o dom√≠nio (ou Enter para 1crypten.space): ").strip()
    if not domain:
        domain = "1crypten.space"
    
    # Executar diagn√≥stico
    diagnostic = TimeoutDiagnostic(domain)
    results = diagnostic.run_full_diagnostic()
    
    # Verificar se h√° problemas cr√≠ticos
    critical_issues = [r for r in results if r['status'] == 'FAIL']
    
    if critical_issues:
        print("\nüö® A√á√ÉO NECESS√ÅRIA: Problemas cr√≠ticos detectados!")
        print("üìñ Consulte o arquivo GATEWAY_TIMEOUT_FIX.md para solu√ß√µes")
        return 1
    else:
        print("\n‚úÖ Sistema funcionando normalmente")
        return 0

if __name__ == "__main__":
    try:
        exit_code = main()
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è Diagn√≥stico interrompido pelo usu√°rio")
        sys.exit(1)
    except Exception as e:
        print(f"\n\nüí• Erro inesperado: {e}")
        sys.exit(1)