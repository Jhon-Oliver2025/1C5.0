#!/usr/bin/env python3
"""
Script de diagn√≥stico para identificar problemas na inicializa√ß√£o
"""

import os
import sys
import traceback
import importlib

def check_python_environment():
    """
    Verifica o ambiente Python
    """
    print("üêç === DIAGN√ìSTICO DO AMBIENTE PYTHON ===")
    print(f"Python version: {sys.version}")
    print(f"Python executable: {sys.executable}")
    print(f"Working directory: {os.getcwd()}")
    print(f"Python path: {sys.path[:3]}...")  # Primeiros 3 paths
    print()

def check_environment_variables():
    """
    Verifica vari√°veis de ambiente cr√≠ticas
    """
    print("üîß === DIAGN√ìSTICO DE VARI√ÅVEIS DE AMBIENTE ===")
    critical_vars = [
        'FLASK_ENV', 'FLASK_DEBUG', 'FLASK_PORT',
        'DATABASE_URL', 'REDIS_URL', 'SECRET_KEY', 'JWT_SECRET',
        'BINANCE_API_KEY', 'BINANCE_SECRET_KEY',
        'TELEGRAM_TOKEN', 'TELEGRAM_CHAT_ID'
    ]
    
    for var in critical_vars:
        value = os.getenv(var)
        if value:
            if 'SECRET' in var or 'KEY' in var or 'TOKEN' in var or 'URL' in var:
                print(f"‚úÖ {var}: {'*' * min(len(value), 10)}... (mascarado)")
            else:
                print(f"‚úÖ {var}: {value}")
        else:
            print(f"‚ùå {var}: N√ÉO DEFINIDA")
    print()

def check_critical_imports():
    """
    Verifica se todas as importa√ß√µes cr√≠ticas funcionam
    """
    print("üì¶ === DIAGN√ìSTICO DE IMPORTA√á√ïES ===")
    
    critical_modules = [
        'flask',
        'psycopg2',
        'redis',
        'requests',
        'pandas',
        'numpy',
        'ta',
        'binance',
        'jwt',
        'config',
        'core.database',
        'core.binance_client',
        'core.technical_analysis',
        'core.telegram_notifier',
        'api'
    ]
    
    for module in critical_modules:
        try:
            importlib.import_module(module)
            print(f"‚úÖ {module}: OK")
        except ImportError as e:
            print(f"‚ùå {module}: FALHA - {e}")
        except Exception as e:
            print(f"‚ö†Ô∏è {module}: ERRO - {e}")
    print()

def check_file_permissions():
    """
    Verifica permiss√µes de arquivos cr√≠ticos
    """
    print("üìÅ === DIAGN√ìSTICO DE ARQUIVOS ===")
    
    critical_files = [
        'app.py',
        'api.py',
        'config.py',
        'core/database.py',
        'core/binance_client.py'
    ]
    
    for file_path in critical_files:
        if os.path.exists(file_path):
            stat = os.stat(file_path)
            print(f"‚úÖ {file_path}: Existe (tamanho: {stat.st_size} bytes)")
        else:
            print(f"‚ùå {file_path}: N√ÉO ENCONTRADO")
    print()

def test_database_connection():
    """
    Testa conex√£o com banco de dados
    """
    print("üóÑÔ∏è === TESTE DE CONEX√ÉO COM BANCO ===")
    
    try:
        database_url = os.getenv('DATABASE_URL')
        if not database_url:
            print("‚ùå DATABASE_URL n√£o definida")
            return
        
        print(f"üîç Testando conex√£o com: {database_url[:30]}...")
        
        import psycopg2
        conn = psycopg2.connect(database_url)
        cursor = conn.cursor()
        cursor.execute("SELECT version();")
        version = cursor.fetchone()
        print(f"‚úÖ PostgreSQL conectado: {version[0][:50]}...")
        cursor.close()
        conn.close()
        
    except Exception as e:
        print(f"‚ùå Erro na conex√£o com PostgreSQL: {e}")
    print()

def test_redis_connection():
    """
    Testa conex√£o com Redis
    """
    print("üî¥ === TESTE DE CONEX√ÉO COM REDIS ===")
    
    try:
        redis_url = os.getenv('REDIS_URL')
        if not redis_url:
            print("‚ùå REDIS_URL n√£o definida")
            return
        
        print(f"üîç Testando conex√£o com: {redis_url[:30]}...")
        
        import redis
        r = redis.from_url(redis_url)
        r.ping()
        print("‚úÖ Redis conectado com sucesso")
        
    except Exception as e:
        print(f"‚ùå Erro na conex√£o com Redis: {e}")
    print()

def main():
    """
    Executa todos os diagn√≥sticos
    """
    print("üöÄ === INICIANDO DIAGN√ìSTICO COMPLETO ===")
    print()
    
    try:
        check_python_environment()
        check_environment_variables()
        check_critical_imports()
        check_file_permissions()
        test_database_connection()
        test_redis_connection()
        
        print("‚úÖ === DIAGN√ìSTICO CONCLU√çDO ===")
        
    except Exception as e:
        print(f"üí• ERRO DURANTE DIAGN√ìSTICO: {e}")
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()