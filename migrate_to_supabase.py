#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de Migra√ß√£o para Supabase
Ajuda na transi√ß√£o do PostgreSQL local para o Supabase
"""

import os
import sys
from dotenv import load_dotenv

def check_supabase_env():
    """
    Verifica se as vari√°veis de ambiente do Supabase est√£o configuradas
    """
    print("üîç Verificando configura√ß√µes do Supabase...")
    
    required_vars = [
        'SUPABASE_URL',
        'SUPABASE_ANON_KEY', 
        'SUPABASE_SERVICE_ROLE_KEY',
        'SUPABASE_DATABASE_URL'
    ]
    
    missing_vars = []
    
    for var in required_vars:
        value = os.getenv(var)
        if not value:
            missing_vars.append(var)
            print(f"‚ùå {var}: N√£o definida")
        else:
            # Mostrar apenas os primeiros caracteres por seguran√ßa
            display_value = value[:20] + "..." if len(value) > 20 else value
            print(f"‚úÖ {var}: {display_value}")
    
    if missing_vars:
        print(f"\n‚ùå Vari√°veis faltando: {', '.join(missing_vars)}")
        print("\nüí° Passos para configurar o Supabase:")
        print("1. Acesse https://supabase.com e crie um projeto")
        print("2. V√° em Settings > API para obter as chaves")
        print("3. V√° em Settings > Database para obter a connection string")
        print("4. Copie .env.supabase.example para .env e preencha as vari√°veis")
        return False
    
    print("\n‚úÖ Todas as vari√°veis do Supabase est√£o configuradas!")
    return True

def test_supabase_connection():
    """
    Testa a conex√£o com o Supabase
    """
    print("\nüîó Testando conex√£o com Supabase...")
    
    try:
        import psycopg2
        from urllib.parse import urlparse
        
        database_url = os.getenv('SUPABASE_DATABASE_URL')
        
        if not database_url:
            print("‚ùå SUPABASE_DATABASE_URL n√£o definida")
            return False
        
        # Analisar URL
        parsed = urlparse(database_url)
        print(f"üîç Conectando ao Supabase: {parsed.hostname}")
        
        # Tentar conex√£o
        conn = psycopg2.connect(database_url)
        cursor = conn.cursor()
        
        # Testar consulta simples
        cursor.execute("SELECT version();")
        version = cursor.fetchone()[0]
        print(f"‚úÖ Conex√£o bem-sucedida! PostgreSQL: {version.split()[1]}")
        
        cursor.close()
        conn.close()
        
        return True
        
    except ImportError:
        print("‚ùå psycopg2 n√£o instalado. Execute: pip install psycopg2-binary")
        return False
    except Exception as e:
        print(f"‚ùå Erro na conex√£o: {e}")
        print("\nüí° Verifique:")
        print("- Se a SUPABASE_DATABASE_URL est√° correta")
        print("- Se o projeto Supabase est√° ativo")
        print("- Se a senha do banco est√° correta")
        return False

def create_tables_if_needed():
    """
    Cria as tabelas necess√°rias no Supabase se n√£o existirem
    """
    print("\nüìã Verificando/criando tabelas necess√°rias...")
    
    try:
        import psycopg2
        
        database_url = os.getenv('SUPABASE_DATABASE_URL')
        conn = psycopg2.connect(database_url)
        cursor = conn.cursor()
        
        # SQL para criar tabelas b√°sicas (adapte conforme necess√°rio)
        tables_sql = """
        -- Tabela de sinais de trading
        CREATE TABLE IF NOT EXISTS trading_signals (
            id SERIAL PRIMARY KEY,
            symbol VARCHAR(20) NOT NULL,
            signal_type VARCHAR(10) NOT NULL,
            price DECIMAL(20, 8),
            score INTEGER,
            timeframe VARCHAR(10),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            metadata JSONB
        );
        
        -- Tabela de configura√ß√µes
        CREATE TABLE IF NOT EXISTS bot_config (
            id SERIAL PRIMARY KEY,
            key VARCHAR(100) UNIQUE NOT NULL,
            value TEXT,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        
        -- √çndices para performance
        CREATE INDEX IF NOT EXISTS idx_trading_signals_symbol ON trading_signals(symbol);
        CREATE INDEX IF NOT EXISTS idx_trading_signals_created_at ON trading_signals(created_at);
        """
        
        cursor.execute(tables_sql)
        conn.commit()
        
        print("‚úÖ Tabelas criadas/verificadas com sucesso!")
        
        cursor.close()
        conn.close()
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao criar tabelas: {e}")
        return False

def show_deployment_instructions():
    """
    Mostra instru√ß√µes para deploy no Coolify
    """
    print("\nüöÄ Instru√ß√µes para Deploy no Coolify:")
    print("\n1. No Coolify, v√° para seu projeto")
    print("2. Adicione as seguintes vari√°veis de ambiente:")
    print("   - SUPABASE_URL")
    print("   - SUPABASE_ANON_KEY")
    print("   - SUPABASE_SERVICE_ROLE_KEY")
    print("   - SUPABASE_DATABASE_URL")
    print("\n3. Fa√ßa commit e push das altera√ß√µes:")
    print("   git add .")
    print("   git commit -m 'feat: migra√ß√£o para Supabase'")
    print("   git push origin main")
    print("\n4. Fa√ßa o deploy no Coolify")
    print("\n‚ú® O backend agora usar√° Supabase em vez do PostgreSQL local!")

def main():
    """
    Fun√ß√£o principal do script de migra√ß√£o
    """
    print("üîÑ Script de Migra√ß√£o para Supabase")
    print("=" * 50)
    
    # Carregar vari√°veis de ambiente
    load_dotenv()
    
    # Verificar configura√ß√µes
    if not check_supabase_env():
        sys.exit(1)
    
    # Testar conex√£o
    if not test_supabase_connection():
        sys.exit(1)
    
    # Criar tabelas se necess√°rio
    if not create_tables_if_needed():
        print("‚ö†Ô∏è Aviso: Erro ao criar tabelas, mas voc√™ pode continuar")
    
    # Mostrar instru√ß√µes de deploy
    show_deployment_instructions()
    
    print("\n‚úÖ Migra√ß√£o para Supabase conclu√≠da com sucesso!")
    print("üéâ Seu projeto est√° pronto para usar o Supabase!")

if __name__ == '__main__':
    main()